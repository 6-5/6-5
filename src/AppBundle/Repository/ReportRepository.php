<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Report;
use AppBundle\Entity\User;

/**
 * ReportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReportRepository extends \Doctrine\ORM\EntityRepository
{
    public function findOneByReference($reference)
    {
        return $this->createQueryBuilder('r')
            ->where('r.reference = :reference')->setParameter('reference', $reference)
            ->getQuery()
            ->getOneOrNullResult()
        ;
    }

    public function getQueryForPagination(User $createdBy = null, $isDraft = null, User $addressedTo = null, $firstResult = 0, $maxResults = 10)
    {
        $qb = $this->createQueryBuilder('r')
            ->addSelect('uc')
            ->addSelect('ua')
            ->addSelect('d')
            ->leftJoin('r.createdBy', 'uc')
            ->leftJoin('r.addressedTo', 'ua')
            ->leftJoin('r.decisions', 'd')
            ->setFirstResult($firstResult)
            ->setMaxResults($maxResults)
        ;

        if ($createdBy) {
            $qb->andWhere('r.createdBy = :createdBy')->setParameter('createdBy', $createdBy);
        }

        if (null !== $isDraft) {
            $qb->andWhere('r.isDraft = :isDraft')->setParameter('isDraft', $isDraft);
        }

        if ($addressedTo) {
            $qb
                ->andWhere('d.user = :addressedTo')->setParameter('addressedTo', $addressedTo)
                ->andWhere(sprintf('d in (%s)', $this->_em->createQueryBuilder()
                    ->from('AppBundle:Decision', 'd2')
                    ->select('max(d2)')
                    ->where('d2.report = r')
                    ->getDQL()
                ))
            ;
        }

        return $qb->getQuery();
    }

    public function count(User $createdBy = null, $isDraft = null)
    {
        $qb = $this->createQueryBuilder('r')->select('count(r.id)');

        if ($createdBy) {
            $qb->where('r.createdBy = :createdBy')->setParameter('createdBy', $createdBy);
        }

        if (null !== $isDraft) {
            $qb->andWhere('r.isDraft = :isDraft')->setParameter('isDraft', $isDraft);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function findByInProcess(User $createdBy)
    {
        return $this->createQueryBuilder('r')
            ->addSelect('d')
            ->join('r.decisions', 'd')
            ->where('r.createdBy = :createdBy')->setParameter('createdBy', $createdBy)
            ->andWhere(sprintf('d in (%s)', $this->_em->createQueryBuilder()
                ->from('AppBundle:Decision', 'd2')
                ->select('max(d2)')
                ->where('d2.report = r')
                ->andWhere('d2.status not in (:status)')
                ->getDQL()
            ))
            ->setParameter('status', [Report::STATUS_ACCEPTED, Report::STATUS_REFUSED])
            ->getQuery()
            ->getResult()
        ;
    }

    public function findByUnread(User $addressedTo)
    {
        return $this->createQueryBuilder('r')
            ->addSelect('d')
            ->join('r.decisions', 'd')
            ->where('r.addressedTo = :addressedTo')->setParameter('addressedTo', $addressedTo)
            ->andWhere(sprintf('d in (%s)', $this->_em->createQueryBuilder()
                ->from('AppBundle:Decision', 'd2')
                ->select('max(d2)')
                ->where('d2.report = r')
                ->andWhere('d2.status = :status')
                ->getDQL()
            ))
            ->setParameter('status', Report::STATUS_ADDRESSED)
            ->getQuery()
            ->getResult()
        ;
    }
}
